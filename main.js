(()=>{"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},t=document.querySelector(".elements__container"),n=document.querySelector(".profile__avatar"),r=document.querySelector(".profile__name"),o=document.querySelector(".profile__profession"),i=document.querySelector(".popup__input_type_name"),a=document.querySelector(".popup__input_type_job"),c=document.querySelector(".profile__edit-btn"),u=document.querySelector(".profile__avatar-container"),s=document.querySelector(".profile__add-btn"),l=document.querySelector(".popup__button_type_edit"),f=document.querySelector(".popup__button_type_add"),p=document.querySelector(".popup__button_type_avatar"),h=document.querySelector(".popup__form_type_profile"),_=document.querySelector(".popup__form_type_element"),d=document.querySelector(".popup__form_type_avatar");function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const v=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=n,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e){var t=document.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=document.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_buttonState",value:function(e,t){e.every((function(e){return e.validity.valid}))?(t.classList.remove(this._inactiveButtonClass),t.disabled=!1):(t.classList.add(this._inactiveButtonClass),t.disabled=!0)}},{key:"_disableButton",value:function(e){e.classList.add(this._inactiveButtonClass)}},{key:"enableValidation",value:function(){var e=this;this._form.addEventListener("submit",(function(e){e.preventDefault()}));var t=Array.from(this._form.querySelectorAll(this._inputSelector)),n=this._form.querySelector(this._submitButtonSelector);this._form.addEventListener("reset",(function(){t.forEach((function(t){e._hideInputError(t)})),e._disableButton(n)})),this._buttonState(t,n),t.forEach((function(r){r.addEventListener("input",(function(){e._isValid(r),e._buttonState(t,n)}))}))}}])&&y(t.prototype,n),e}();function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const b=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._link=t.link,this._name=t.name,this._id=t._id,this._elementSelector=n,this._handleCardClick=r,this._handleDeleteButton=o}var t,n;return t=e,(n=[{key:"id",value:function(){return this._id}},{key:"_getCardTemplate",value:function(){return document.querySelector(this._elementSelector).content}},{key:"_handleLikeButton",value:function(e){e.target.classList.toggle("elements__like_active")}},{key:"_setEventListeners",value:function(){var e=this,t=this._card.querySelector(".elements__image"),n=this._card.querySelector(".elements__like"),r=this._card.querySelector(".elements__trash");n.addEventListener("click",(function(t){return e._handleLikeButton(t)})),r.addEventListener("click",(function(){return e._handleDeleteButton(e.id())})),t.addEventListener("click",(function(){return e._handleCardClick(e._name,e._link)}))}},{key:"generateCard",value:function(){this._card=this._getCardTemplate().querySelector(".elements__item").cloneNode(!0);var e=this._card.querySelector(".elements__image");return this._card.querySelector(".elements__title").textContent=this._name,e.style.backgroundImage="url(".concat(this._link,")"),e.alt="Picture of ".concat(this._name),this._setEventListeners(),this._card}}])&&m(t.prototype,n),e}();function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const E=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(e){var t=this;this._popupElement.querySelector(".popup__close-btn").addEventListener("click",(function(){t.close()})),this._popupElement.addEventListener("click",(function(e){e.target.classList.contains("popup_active")&&t.close()}))}}])&&g(t.prototype,n),e}();function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t,n){return(w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return O(this,e)});function a(e){var t,n=e.popupSelector,r=e.submitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._submitHandler=r,t}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return Array.from(this._form.querySelectorAll(".popup__input")).forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;w(j(a.prototype),"setEventListeners",this).call(this),this._form=this._popupElement.querySelector(".popup__form"),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._getInputValues()),e.close()}))}},{key:"close",value:function(){w(j(a.prototype),"close",this).call(this),this._form.reset()}}])&&S(t.prototype,n),a}(E);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t,n){return(T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=x(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const U=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=x(r);if(o){var n=x(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._popupElement.querySelector(".popup__image"),t._imageCaption=t._popupElement.querySelector(".popup__image-title"),t}return t=a,(n=[{key:"open",value:function(e,t){T(x(a.prototype),"open",this).call(this),this._image.src=t,this._image.alt="Picture of ".concat(e),this._imageCaption.textContent=e}}])&&q(t.prototype,n),a}(E);function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const D=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._itemArray=r,this._renderer=o,this._cardContainer=n}var t,n;return t=e,(n=[{key:"renderer",value:function(){var e=this;this._itemArray.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._cardContainer.prepend(e)}}])&&B(t.prototype,n),e}();function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const A=function(){function e(t){var n=t.name,r=t.occupation,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._occupation=r,this._avatar=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,occupation:this._occupation.textContent,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(e,t,n){this._name.textContent=e,this._occupation.textContent=t,this._avatar.src=n}}])&&H(t.prototype,n),e}();function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const N=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"getAppInfo",value:function(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"removeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"addLikeStatus",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"removeLikeStatus",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"setProfileInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"setUserAvatar",value:function(e){var t=e.avatar;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,body:JSON.stringify({avatar:t})}).then((function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)})).catch((function(e){return console.log(e)}))}}])&&V(t.prototype,n),e}();function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t,n){return(M="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=K(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=K(r);if(o){var n=K(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return G(this,e)});function a(e){var t,n=e.popupSelector,r=e.submitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._submitHandler=r,t}return t=a,(n=[{key:"handleDelete",value:function(){this._card.remove()}},{key:"open",value:function(e,t){M(K(a.prototype),"open",this).call(this),this._data=e,this._cardItem=t}},{key:"setEventListeners",value:function(){var e=this;M(K(a.prototype),"setEventListeners",this).call(this),this._popupElement.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._data),e.close()}))}}])&&z(t.prototype,n),a}(E);function W(e,t){t.textContent=e?"Saving...":"Saved"}var X=new N({baseUrl:"https://around.nomoreparties.co/v1/group-10",headers:{authorization:"5ba73148-e2fc-4c55-8f70-b1a18db29f75","Content-Type":"application/json"}});function Y(e){ie.open()}function Z(e,t){oe.open(e,t)}X.getInitialCards().then((function(e){var n=new D({items:e,renderer:function(e){n.addItem(o(e))}},t);n.renderer();var r=new P({popupSelector:".popup_type_add",submitHandler:function(e){W(!0,f),X.addCard(e).then((function(e){n.addItem(o({name:e.title,link:e.image})),W(!1,f)})).then((function(){r.close()})).catch((function(e){console.log(e)}))}});function o(e){return new b(e,".elements-template",Z,Y).generateCard($.id())}r.setEventListeners(),s.addEventListener("click",(function(){r.open()}))})),X.getUserInfo().then((function(e){$.setUserInfo(e.name,e.about,e.avatar)}));var $=new A({name:r,occupation:o,avatar:n}),ee=new v(e,h),te=new v(e,_),ne=new v(e,d);ee.enableValidation(),te.enableValidation(),ne.enableValidation();var re=new P({popupSelector:".popup_type_edit",submitHandler:function(e){W(!0,l),X.setProfileInfo({name:e.name,about:e.description,avatar:e.avatar}).then((function(e){$.setUserInfo(e.name,e.description,e.avatar),W(!1,l)})).then((function(){re.close()})).catch((function(e){console.log(e)}))}});re.setEventListeners(),c.addEventListener("click",(function(){var e=$.getUserInfo();i.value=e.name,a.value=e.occupation,re.open()}));var oe=new U(".popup_type_image");oe.setEventListeners();var ie=new Q({popupSelector:".popup_type_delete",submitHandler:function(e){X.removeCard(e).then((function(){ie.handleDelete(),ie.close()})).catch((function(e){console.log(e)}))}});ie.setEventListeners();var ae=new P({popupSelector:".popup_type_avatar",submitHandler:function(e){W(!0,p),X.setUserAvatar({avatar:e.avatar}).then((function(e){$.setUserInfo(e.name,e.description,e.avatar),W(!1,p)})).then((function(){ae.close()})).catch((function(e){console.log(e)}))}});ae.setEventListeners(),u.addEventListener("click",(function(){ae.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,