(()=>{"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},t=document.querySelector(".elements__container"),n=document.querySelector(".profile__avatar"),r=document.querySelector(".profile__name"),o=document.querySelector(".profile__profession"),i=document.querySelector(".popup__input_type_name"),a=document.querySelector(".popup__input_type_job"),c=document.querySelector(".profile__edit-btn"),u=document.querySelector(".profile__avatar-container"),s=document.querySelector(".profile__add-btn"),l=document.querySelector(".popup__button_type_edit"),f=document.querySelector(".popup__button_type_add"),p=document.querySelector(".popup__button_type_avatar"),_=document.querySelector(".popup__button_type_delete"),h=document.querySelector(".popup__form_type_profile"),d=document.querySelector(".popup__form_type_element"),y=document.querySelector(".popup__form_type_avatar");function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const m=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=n,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_buttonState",value:function(e,t){e.every((function(e){return e.validity.valid}))?(t.classList.remove(this._inactiveButtonClass),t.disabled=!1):this._disableButton(t)}},{key:"_disableButton",value:function(e){e.classList.add(this._inactiveButtonClass),e.disabled=!0}},{key:"enableValidation",value:function(){var e=this;this._form.addEventListener("submit",(function(e){e.preventDefault()}));var t=Array.from(this._form.querySelectorAll(this._inputSelector)),n=this._form.querySelector(this._submitButtonSelector);this._form.addEventListener("reset",(function(){t.forEach((function(t){e._hideInputError(t)})),e._disableButton(n)})),this._buttonState(t,n),t.forEach((function(r){r.addEventListener("input",(function(){e._isValid(r),e._buttonState(t,n)}))}))}}])&&v(t.prototype,n),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const k=function(){function e(t,n,r,o,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._link=t.link,this._name=t.name,this._likes=t.likes,this._id=t._id,this._owner=t.owner._id,this._elementSelector=n,this._handleCardClick=r,this._handleDeleteButton=o,this._handleLikeButton=i}var t,n;return t=e,(n=[{key:"getId",value:function(){return this._id}},{key:"_getCardTemplate",value:function(){return document.querySelector(this._elementSelector).content}},{key:"isLiked",value:function(){return this._liked}},{key:"_addLike",value:function(){this._liked=!0,this._card.querySelector(".elements__like").classList.add("elements__like_active")}},{key:"_removeLike",value:function(){this._liked=!1,this._card.querySelector(".elements__like").classList.remove("elements__like_active")}},{key:"_likeStatus",value:function(e){return this._likes.find((function(t){return t._id===e}))?this._liked=!0:this._liked=!1,this._liked}},{key:"updateLikesCounter",value:function(e,t){this._likes=e.likes,this._likeStatus(t._id)?this._addLike():this._removeLike(),this._card.querySelector(".elements__like-counter").textContent=this._likes.length}},{key:"_handleLikeButton",value:function(e){e.target.classList.toggle("elements__like_active")}},{key:"_setEventListeners",value:function(e){var t=this,n=this._card.querySelector(".elements__image"),r=this._card.querySelector(".elements__like"),o=this._card.querySelector(".elements__trash");r.addEventListener("click",(function(){return t._handleLikeButton(t)})),this._owner!==e?o.remove():o.addEventListener("click",(function(){t._handleDeleteButton(t._id,t._card)})),n.addEventListener("click",(function(){return t._handleCardClick(t._name,t._link)}))}},{key:"generateCard",value:function(e){this._card=this._getCardTemplate().querySelector(".elements__item").cloneNode(!0);var t=this._card.querySelector(".elements__image"),n=this._card.querySelector(".elements__title"),r=this._card.querySelector(".elements__like-counter");return n.textContent=this._name,t.style.backgroundImage="url(".concat(this._link,")"),t.alt="Picture of ".concat(this._name),r.textContent=this._likes.length,this._likeStatus(e)&&this._card.querySelector(".elements__like").classList.add("elements__like_active"),this._setEventListeners(e),this._card}}])&&b(t.prototype,n),e}();function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const S=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(e){var t=this;this._popupElement.querySelector(".popup__close-btn").addEventListener("click",(function(){t.close()})),this._popupElement.addEventListener("click",(function(e){e.target.classList.contains("popup_active")&&t.close()}))}}])&&g(t.prototype,n),e}();function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t,n){return(C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function a(e){var t,n=e.popupSelector,r=e.submitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._submitHandler=r,t}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return Array.from(this._form.querySelectorAll(".popup__input")).forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;C(j(a.prototype),"setEventListeners",this).call(this),this._form=this._popupElement.querySelector(".popup__form"),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._getInputValues())}))}},{key:"close",value:function(){C(j(a.prototype),"close",this).call(this),this._form.reset()}}])&&w(t.prototype,n),a}(S);function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t,n){return(I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=U(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e,t){return!t||"object"!==q(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=U(r);if(o){var n=U(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._popupElement.querySelector(".popup__image"),t._imageCaption=t._popupElement.querySelector(".popup__image-title"),t}return t=a,(n=[{key:"open",value:function(e,t){I(U(a.prototype),"open",this).call(this),this._image.src=t,this._image.alt="Picture of ".concat(e),this._imageCaption.textContent=e}}])&&R(t.prototype,n),a}(S);function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const D=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._itemArray=r,this._renderer=o,this._cardContainer=n}var t,n;return t=e,(n=[{key:"renderer",value:function(){var e=this;this._itemArray.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._cardContainer.prepend(e)}}])&&A(t.prototype,n),e}();function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const V=function(){function e(t){var n=t.name,r=t.occupation,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._occupation=r,this._avatar=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,occupation:this._occupation.textContent,avatar:this._avatar.src,_id:this._id}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.occupation,r=e.avatar,o=e._id;this._name.textContent=t,this._occupation.textContent=n,this._avatar.src=r,this._id=o}}])&&H(t.prototype,n),e}();function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const J=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Error!"+e.statusText)}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"getUserInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"getAppInfo",value:function(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}},{key:"addCard",value:function(e){var t=this,n=e.name,r=e.link;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:n,link:r})}).then((function(e){return t._checkResponse(e)}))}},{key:"removeCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return t._checkResponse(e)}))}},{key:"addLikeStatus",value:function(e,t){var n=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT",body:JSON.stringify(t)}).then((function(e){return n._checkResponse(e)}))}},{key:"removeLikeStatus",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return t._checkResponse(e)}))}},{key:"setProfileInfo",value:function(e){var t=this,n=e.name,r=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:n,about:r})}).then((function(e){return t._checkResponse(e)}))}},{key:"setUserAvatar",value:function(e){var t=this,n=e.avatar;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:n})}).then((function(e){return t._checkResponse(e)}))}}])&&N(t.prototype,n),e}();function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(e,t,n){return($="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=K(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e,t){return!t||"object"!==M(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=K(r);if(o){var n=K(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return G(this,e)});function a(e){var t,n=e.popupSelector,r=e.submitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._submitHandler=r,t}return t=a,(n=[{key:"handleDelete",value:function(e){e.remove()}},{key:"open",value:function(e,t){$(K(a.prototype),"open",this).call(this),this._cardId=e,this._cardItem=t}},{key:"setEventListeners",value:function(){var e=this;$(K(a.prototype),"setEventListeners",this).call(this),this._form=this._popupElement.querySelector(".popup__form"),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._cardId,e._cardItem)}))}}])&&z(t.prototype,n),a}(S);function W(e,t,n){t.textContent=n}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Y=new J({baseUrl:"https://around.nomoreparties.co/v1/group-10",headers:{authorization:"5ba73148-e2fc-4c55-8f70-b1a18db29f75","Content-Type":"application/json"}});Y.getAppInfo().then((function(e){var n,r,o=(r=2,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1],c=a;function u(e,t){ie.open(e,t)}function l(e){e.isLiked()?Y.removeLikeStatus(e.getId()).then((function(t){e.updateLikesCounter(t,c)})).catch((function(e){return console.log(e)})):Y.addLikeStatus(e.getId(),c).then((function(t){e.updateLikesCounter(t,c)})).catch((function(e){return console.log(e)}))}function p(e,t){oe.open(e,t)}Z.setUserInfo({name:a.name,occupation:a.about,avatar:a.avatar,_id:a._id});var _=new D({items:i,renderer:function(e){_.addItem(h(e))}},t);function h(e){return new k(e,".elements-template",p,u,l).generateCard(c._id)}_.renderer();var d=new P({popupSelector:".popup_type_add",submitHandler:function(e){var t=e.title,n=e.image;W(0,f,"Saving..."),Y.addCard({name:t,link:n}).then((function(e){_.addItem(h(e))})).then((function(){d.close()})).catch((function(e){console.log(e)})).finally((function(){W(0,f,"Saved")}))}});d.setEventListeners(),s.addEventListener("click",(function(){d.open()}))})).catch((function(e){console.log(e)}));var Z=new V({name:r,occupation:o,avatar:n}),ee=new m(e,h),te=new m(e,d),ne=new m(e,y);ee.enableValidation(),te.enableValidation(),ne.enableValidation();var re=new P({popupSelector:".popup_type_edit",submitHandler:function(e){var t=e.name,n=e.description;W(0,l,"Saving..."),Y.setProfileInfo({name:t,about:n}).then((function(e){Z.setUserInfo({name:e.name,occupation:e.about,avatar:e.avatar,_id:e._id})})).then((function(){re.close()})).catch((function(e){console.log(e)})).finally((function(){W(0,l,"Saved")}))}});re.setEventListeners(),c.addEventListener("click",(function(){var e=Z.getUserInfo();i.value=e.name,a.value=e.occupation,re.open()}));var oe=new x(".popup_type_image");oe.setEventListeners();var ie=new Q({popupSelector:".popup_type_delete",submitHandler:function(e,t){W(0,_,"Deleting..."),Y.removeCard(e).then((function(){ie.handleDelete(t),ie.close()})).catch((function(e){console.log(e)})).finally((function(){W(0,_,"Deleted")}))}});ie.setEventListeners();var ae=new P({popupSelector:".popup_type_avatar",submitHandler:function(e){var t=e.avatar;W(0,p,"Saving..."),Y.setUserAvatar({avatar:t}).then((function(e){Z.setUserInfo({name:e.name,occupation:e.about,avatar:e.avatar,_id:e._id})})).then((function(){ae.close()})).catch((function(e){console.log(e)})).finally((function(){W(0,p,"Saved")}))}});ae.setEventListeners(),u.addEventListener("click",(function(){ae.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,